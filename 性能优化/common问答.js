/**
 * seo优化
 *
 * 1.逐渐递减的title
 * 2.不是装饰性的图片都增加alt
 * 3.单页应用异步获取数据较多，可以采用服务端渲染的模式ssr
 * 4.减少使用iframe，爬虫无法读取iframe的内容将会认为该网站已废弃
 * 5.优化网站性能，提高网页速度
 *
 *
 *
 *
 * 网页性能优化
 *
 * 想要优化网页呢，主要是对网页的首页加载速度和动画的流畅程度
 *
 * 首先说提高加载速度:
 *
 * 1.如果网站已经成型后进行性能优化，我们可以通过chrome提供的performance检测资源加载速度进，查看针对性的资源进行优化
 * 2.再者因为html的渲染模式，html渲染在遇到javascript和css在头部时会进行阻塞，会停止解析html先下载资源在进行解析所有这就给首页白屏增加了很多时间
 * 3.尽量减少页面的重排，html在渲染时会计算dom元素的大小和位置，这时比较耗时的操作:
 * 具体属性:屏幕旋转、浏览器视窗改变、大小位置相关css属性改变、增加和删除dom元素
 * 4.可以将不需要提前加载的javascript文件放在页面body内容最后，这样便不会阻塞dom渲染
 * 5.将script标签放在head中的话可以针对javascript资源来使用defer和async属性
 * defer属性设置后，设置的javascript会等html、dom渲染完成后顺序执行，而async则是异步加载javascript加载完成立即执行
 *
 *
 * 1.18年比较热门的服务端渲染，提高首屏加载速度
 * 2.将css、js、合并压缩减少http请求，css精灵图减少图片请求
 * 3.重构html层，使页面布局更加合理dom元素更加少
 * 4.使用http缓存，对静态资源进行缓存;分为强制缓存和协商缓存
 *  属性：http请求头中设置cache-control
 *  为no-cache表明使用协商缓存，no-store不使用缓存，
 *  private属性在第一次访问会获取请求，之后不会
 *  max-age表明过期时间在对应的时间段内不会进行重新请求
 *  Expires属性设置过期时间，只有过了时间点才回进行重新获取
 * 5.使用事件代理减少js事件
 * 6.减少cookie大小
 * 7.减少使用iframe，因为浏览器对相同域链接有限制所以会导致页面不能并行加载
 * 8.减少使用import导入css，嵌套层次加深会造成css文件串行下载
 *
 * 浏览器地址输入url到页面显示的过程
 * 在浏览器输入域名后，浏览器会查看是否有当前域名的dns缓存如果存在，
 * 直接通过dns缓存找到对应的ip地址，否则将重新进行dns查询查询成功并返回ip
 * 进行服务端http请求
 * 服务端获取到响应后，返回对应的资源
 * 返回的html资源，浏览器首先会将head头部资源进行加载，像script设置了defer例外
 * 当外链资源加载完毕后，开始解析dom树，最后生成我们所看到的网页
 *
 *
 *
 */